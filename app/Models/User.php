<?php

namespace App\Models;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Notifications\ResetPassword;
use Illuminate\Support\Facades\Auth;

class User extends Authenticatable
{
    use Notifiable;

    protected $table = 'users';

    public function gravatar($size='100')
    {
        $hash = md5(strtolower(trim($this->attributes['email'])));
        return "https://cdn.v2ex.com/gravatar/$hash?s=$size";
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        //创建事件监听
        static ::creating(function($user){
            $user->activation_token = str_random(30);
        });
    }

    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPassword($token));
    }

    /**
     * @desc    一个用户有多个微博
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function statuses()
    {
        return $this->hasMany(Status::class);
    }

    public function feed()
    {
        $user_ids = Auth::user()->followings->pluck('id')->toArray();
        array_push($user_ids,Auth::user()->id);
        return Status::whereIn('user_id',$user_ids)
                        ->with('user')
                        ->orderBy('created_at','desc');
    }


    /**
     * 用户粉丝表
     */

    /**
     * @desc 通过某个用户来查询出他的粉丝是谁
     * //我们可以通过$user->followers 来获取粉丝的信息
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function followers()
    {
        return $this->belongsToMany(User::Class,'followers','user_id','follower_id');
    }

    /**
     * @desc 通过关注的用户id来获取这个用户的信息
     * 我们可以通过$user->followings 来获取关注用户的信息
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function followings()
    {
        return $this->belongsToMany(User::Class,'followers','follower_id','user_id');
    }

    /**
     * @desc 关注用户动作，使用followings()->sync($user_ids,false)进行数据库表的操作
     * @param $user_ids
     */
    public function follow($user_ids)
    {
        if (!is_array($user_ids)){
            $user_ids = compact('user_ids');
        }
        $this->followings()->sync($user_ids,false);
    }

    /**
     * @desc 取消关注动作,使用following()->detach($user_ids)
     * @param $user_ids
     */
    public function unfollow($user_ids)
    {
        if (! is_array($user_ids)){
            $user_ids = compact('user_ids');
        }
        $this->followings()->detach($user_ids);
    }
    /**
     * @desc 判断当前登录的的用户是否已经关注来某些用户
     * @param $user_ids
     * @return mixed
     */
    public function isFollowing($user_ids)
    {
        return $this->followings->contains($user_ids);
    }



}
